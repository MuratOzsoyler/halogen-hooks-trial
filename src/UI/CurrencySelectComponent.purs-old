module UI.CurrencySelectComponent 
    ( Currency (..)
    , currencySelectComponent
    ) where

import Prelude

import DOM.HTML.Indexed as D
import Data.Enum (class Enum, enumFromTo)
import Data.HeytingAlgebra (impliesRecord)
import Data.Maybe (Maybe(..), fromJust, fromMaybe)
import Data.String.Read (class Read, read)
import Data.Tuple.Nested ((/\))
import Effect.Aff.Class (class MonadAff)
import Halogen (liftEffect)
import Halogen as H
import Halogen.HTML as HH
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties as HP
import Halogen.Hooks as Hooks
import Partial.Unsafe (unsafePartial)
import Unsafe.Coerce (unsafeCoerce)
import Web.HTML as HTML
import Web.HTML.HTMLSelectElement as Select

data Currency = TRL | USD | EUR

derive instance currencyEq   :: Eq   Currency 
derive instance currencyOrd   :: Ord   Currency 
instance currencyShow :: Show Currency where
  show TRL = "TRL" 
  show USD = "USD" 
  show EUR = "EUR" 
instance currencyRead :: Read Currency where
  read "TRL" = Just TRL
  read "USD" = Just USD
  read "EUR" = Just EUR
  read _ = Nothing
instance currencyEnum :: Enum Currency where
  pred TRL = Nothing 
  pred USD = Just TRL
  pred EUR = Just USD
  succ TRL = Just USD 
  succ USD = Just EUR
  succ EUR = Nothing

data Query a = WhatIs (Currency -> a)

data Message = Changed Currency

type Slot = H.Slot Query Message

type Tokens = Hooks.ComponentTokens Query () Message

-- currencySelectComponent 
--   :: forall query input output m
--    . MonadAff m
--   => Currency
--   -> H.RefLabel
--   -> H.Component HH.HTML query input output m
currencySelectComponent 
  :: forall query input output m
   . MonadAff m 
  => H.Component HH.HTML Query Currency Message m
currencySelectComponent = Hooks.component \(tokens :: Tokens) input -> Hooks.do
  currency /\ currencyId <- Hooks.useState input
  Hooks.useQuery tokens.queryToken case _ of
    WhatIs reply -> pure $ Just $ reply currency

  let 
      handleChange :: Hooks.HookM m Unit
      handleChange = 
        Hooks.getHTMLElementRef id
        >>= pure <<< toSelectElement <<< unsafePartial fromJust
        >>= liftEffect <<< Select.value
        >>= Hooks.modify currencyId <<< const <<< fromMaybe TRL <<< read
        >>= Hooks.raise tokens.outputToken <<< Changed 
        -- >>= pure <<< Just
  Hooks.pure $ HH.select
    [ HP.ref $ H.RefLabel "currSelect"
    , HE.onChange \_ -> Just handleChange
    ]
    (map opt $ enumFromTo TRL EUR)
  where
    -- curr = Hooks.get currencyId
    -- opt c = HH.option [HP.selected $ isSelected c] [HH.text $ show c]
    -- isSelected c = curr == c
    toSelectElement :: HTML.HTMLElement -> Select.HTMLSelectElement
    toSelectElement = unsafeCoerce